import { compile as hbsCompile } from 'handlebars';
import { DataHelpers } from './templating-helpers/data-helpers';
import { FakerWrapper } from './templating-helpers/faker-wrapper';
import { GlobalHelpers } from './templating-helpers/global-helpers';
import { Helpers } from './templating-helpers/helpers';
import { RequestHelpers } from './templating-helpers/request-helpers';
import { ResponseHelpers } from './templating-helpers/response-helpers';
import { SystemHelpers } from './templating-helpers/system-helpers';
/**
 * Parse a content with Handlebars
 * @param shouldOmitDataHelper
 * @param content
 * @param environment
 * @param processedDatabuckets
 * @param request
 */
export const TemplateParser = function ({ shouldOmitDataHelper, content, environment, processedDatabuckets, globalVariables, request, response, envVarsPrefix }) {
    let helpers = Object.assign(Object.assign(Object.assign(Object.assign({}, FakerWrapper), Helpers), GlobalHelpers(globalVariables)), SystemHelpers({ prefix: envVarsPrefix }));
    if (!shouldOmitDataHelper) {
        helpers = Object.assign(Object.assign({}, helpers), DataHelpers(processedDatabuckets));
    }
    if (request) {
        helpers = Object.assign(Object.assign({}, helpers), RequestHelpers(request, environment));
    }
    if (response) {
        helpers = Object.assign(Object.assign({}, helpers), ResponseHelpers(response));
    }
    try {
        return hbsCompile(content)({}, {
            helpers
        });
    }
    catch (error) {
        throw error;
    }
};
//# sourceMappingURL=template-parser.js.map