/**
 * Handlebars may insert its own `options` object as the last argument.
 * Be careful when retrieving `defaultValue` or any other last param.
 *
 * use:
 * if (typeof defaultValue === 'object') {
 *   defaultValue = '';
 * }
 *
 * or:
 * args[args.length - 1]
 */
export declare const Helpers: {
    add: (...args: any[]) => any;
    array: (...args: any[]) => any[];
    base64: (...args: any[]) => Handlebars.SafeString;
    base64Decode: (...args: any[]) => Handlebars.SafeString;
    boolean: () => boolean;
    case: (...args: any[]) => any;
    ceil: (...args: any[]) => number | "";
    city: () => any;
    color: () => any;
    company: () => any;
    concat: (...args: any[]) => string;
    country: () => any;
    countryCode: () => any;
    date: (...args: any[]) => string;
    dateFormat: (...args: any[]) => string;
    dateTimeShift: (options: Handlebars.HelperOptions) => string;
    default: (options: Handlebars.HelperOptions) => string;
    divide: (...args: any[]) => any;
    domain: () => any;
    email: () => any;
    eq: (val1: number | string, val2: number | string) => boolean;
    filter: (...args: any[]) => any[] | "";
    firstName: () => any;
    float: (...args: any[]) => number;
    floor: (...args: any[]) => number | "";
    getVar: (...args: any[]) => any;
    gt: (num1: number | string, num2: number | string) => boolean;
    gte: (num1: number | string, num2: number | string) => boolean;
    guid: () => string;
    helperMissing: () => string;
    hexColor: () => string;
    includes: (data: string | Handlebars.SafeString | Handlebars.HelperOptions, search: string | Handlebars.SafeString | Handlebars.HelperOptions | undefined) => boolean;
    indexOf: (data: string | Handlebars.SafeString | Handlebars.HelperOptions, search: string | Handlebars.SafeString | Handlebars.HelperOptions | undefined, position?: number | string | Handlebars.SafeString | Handlebars.HelperOptions | undefined) => number;
    int: (...args: any[]) => number;
    ipv4: () => string;
    ipv6: () => string;
    join: (arr: string[], sep: string) => string;
    jsonParse: (...args: any[]) => any;
    jwtHeader: (...args: any[]) => any;
    jwtPayload: (...args: any[]) => any;
    lastName: () => any;
    lat: () => number;
    len: (arr: Array<unknown> | string) => number;
    long: () => number;
    lorem: (...args: any[]) => any;
    lowercase: (...args: any[]) => string;
    lt: (num1: number | string, num2: number | string) => boolean;
    lte: (num1: number | string, num2: number | string) => boolean;
    modulo: (...args: any[]) => number | "";
    multiply: (...args: any[]) => any;
    newline: () => string;
    now: (format: any) => string;
    object: (options: Handlebars.HelperOptions) => any;
    objectId: () => string;
    oneOf: (...args: any[]) => any;
    padEnd: (...args: any[]) => string;
    padStart: (...args: any[]) => string;
    parseInt: (...args: any[]) => number | "";
    phone: () => any;
    postcode: () => any;
    repeat: (...args: any[]) => string;
    reverse: (arr: Array<unknown>) => "" | unknown[];
    round: (...args: any[]) => number | "";
    setVar: (...args: any[]) => void;
    slice: (arr: Array<unknown>, sliceFrom: number, sliceTo?: number | unknown) => "" | unknown[];
    someOf: (itemList: string[], min: number, max: number, stringify?: boolean) => string | string[];
    sort: (...args: any[]) => any[] | "";
    sortBy: (...args: any[]) => any[] | "";
    split: (...args: any[]) => "" | string[];
    street: () => any;
    stringify: (data: unknown, options: Handlebars.HelperOptions) => unknown;
    substr: (data: string | Handlebars.SafeString | Handlebars.HelperOptions, from: number | string | Handlebars.SafeString | Handlebars.HelperOptions | undefined, length: number | string | Handlebars.SafeString | Handlebars.HelperOptions | undefined) => string;
    subtract: (...args: any[]) => any;
    switch: (value: any, options: Handlebars.HelperOptions) => string;
    time: (...args: any[]) => string;
    title: (...args: any[]) => any;
    tld: () => any;
    toFixed: (number: number, digits: number) => string;
    uppercase: (...args: any[]) => string;
    zipcode: () => any;
};
