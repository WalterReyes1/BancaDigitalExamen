"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FakerWrapper = void 0;
const faker_1 = require("../../libs/faker");
const utils_1 = require("../utils");
exports.FakerWrapper = {
    faker: function (...args) {
        const hbsOptions = args[args.length - 1];
        let fakerName;
        if (args.length === 1) {
            fakerName = '';
        }
        else {
            fakerName = (0, utils_1.fromSafeString)(args[0]);
        }
        if (typeof fakerName !== 'string') {
            throw new Error(`Faker method name must be a string (valid: "location.zipCode", "date.past", etc) line ${hbsOptions.loc && hbsOptions.loc.start && hbsOptions.loc.start.line}`);
        }
        const [fakerPrimaryMethod, fakerSecondaryMethod] = fakerName.split('.');
        let errorMessage = `${fakerName} is not a valid Faker method`;
        // check faker helper name pattern
        if (!fakerName ||
            !fakerName.match(/^[a-z]+\.[a-z0-9]+$/i) ||
            !fakerPrimaryMethod ||
            !fakerSecondaryMethod ||
            !faker_1.localFaker[fakerPrimaryMethod] ||
            !faker_1.localFaker[fakerPrimaryMethod][fakerSecondaryMethod]) {
            if (!fakerName) {
                errorMessage = 'Faker method name is missing';
            }
            throw new Error(`${errorMessage} (valid: "location.zipCode", "date.past", etc) line ${hbsOptions.loc &&
                hbsOptions.loc &&
                hbsOptions.loc.start &&
                hbsOptions.loc.start.line}`);
        }
        const fakerFunction = faker_1.localFaker[fakerPrimaryMethod][fakerSecondaryMethod];
        const fakerArgsRaw = args.slice(1, args.length - 1);
        const fakerArgs = [];
        fakerArgsRaw.forEach((arg) => {
            if (typeof arg === 'string' && arg.startsWith('{') && arg.endsWith('}')) {
                const objectArg = (0, utils_1.objectFromSafeString)(arg);
                if (objectArg === null) {
                    throw new Error(`Error in parsing object argument ${arg}`);
                }
                else {
                    fakerArgs.push(objectArg);
                }
            }
            else {
                fakerArgs.push(arg);
            }
        });
        // push hbs named parameters (https://handlebarsjs.com/guide/block-helpers.html#hash-arguments) to Faker
        if (!(0, utils_1.IsEmpty)(hbsOptions.hash)) {
            fakerArgs.push(hbsOptions.hash);
        }
        return (0, faker_1.safeFakerReturn)(() => fakerFunction(...fakerArgs));
    }
};
//# sourceMappingURL=faker-wrapper.js.map