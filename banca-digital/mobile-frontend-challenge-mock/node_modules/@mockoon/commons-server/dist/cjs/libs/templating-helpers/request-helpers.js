"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestHelpers = exports.requestHelperNames = void 0;
const handlebars_1 = require("handlebars");
const utils_1 = require("../utils");
exports.requestHelperNames = [
    'bodyRaw',
    'body',
    'method',
    'ip',
    'urlParam',
    'queryParam',
    'queryParamRaw',
    'header',
    'cookie',
    'baseUrl',
    'hostname'
];
const RequestHelpers = function (request, environment) {
    return {
        // get json property from body
        body: function (...args) {
            var _a, _b, _c;
            const parameters = args.slice(0, -1); // remove last item (handlebars options argument)
            // convert path to string as number are also supported
            const path = ((_a = (0, utils_1.fromSafeString)(parameters[0])) !== null && _a !== void 0 ? _a : '').toString();
            const defaultValue = (_b = (0, utils_1.fromSafeString)(parameters[1])) !== null && _b !== void 0 ? _b : '';
            const stringify = (_c = parameters[2]) !== null && _c !== void 0 ? _c : false;
            if (path === '' || path == null) {
                return new handlebars_1.SafeString(request.stringBody);
            }
            let value = defaultValue;
            if (request.body) {
                value = request.body;
            }
            if (path != null && path !== '') {
                value = (0, utils_1.getValueFromPath)(value, path, defaultValue);
            }
            if (Array.isArray(value) || typeof value === 'object' || stringify) {
                return new handlebars_1.SafeString(JSON.stringify(value));
            }
            else {
                return new handlebars_1.SafeString(value);
            }
        },
        // get the raw json property from body to use with each for example
        bodyRaw: function (...args) {
            var _a, _b;
            const parameters = args.slice(0, -1); // remove last item (handlebars options argument)
            // convert path to string as number are also supported
            const path = ((_a = (0, utils_1.fromSafeString)(parameters[0])) !== null && _a !== void 0 ? _a : '').toString();
            const defaultValue = (_b = (0, utils_1.fromSafeString)(parameters[1])) !== null && _b !== void 0 ? _b : '';
            if (!request.body) {
                return defaultValue;
            }
            return (0, utils_1.getValueFromPath)(request.body, path, defaultValue);
        },
        // use params from url /:param1/:param2
        urlParam: function (paramName) {
            return request.params[paramName];
        },
        // use params from query string ?param1=xxx&param2=yyy
        queryParam: function (...args) {
            var _a, _b, _c;
            const parameters = args.slice(0, -1); // remove last item (handlebars options argument)
            // convert path to string as number are also supported
            const path = ((_a = (0, utils_1.fromSafeString)(parameters[0])) !== null && _a !== void 0 ? _a : '').toString();
            const defaultValue = (_b = (0, utils_1.fromSafeString)(parameters[1])) !== null && _b !== void 0 ? _b : '';
            const stringify = (_c = parameters[2]) !== null && _c !== void 0 ? _c : false;
            let value = defaultValue;
            if (request.query) {
                value = request.query;
            }
            value = (0, utils_1.getValueFromPath)(value, path, defaultValue);
            if (Array.isArray(value) || typeof value === 'object' || stringify) {
                return new handlebars_1.SafeString(JSON.stringify(value));
            }
            else {
                return new handlebars_1.SafeString(value);
            }
        },
        // use raw params from query string ?param1=xxx&param2=yyy
        queryParamRaw: function (...args) {
            var _a, _b;
            const parameters = args.slice(0, -1); // remove last item (handlebars options argument)
            // convert path to string as number are also supported
            const path = ((_a = (0, utils_1.fromSafeString)(parameters[0])) !== null && _a !== void 0 ? _a : '').toString();
            const defaultValue = (_b = (0, utils_1.fromSafeString)(parameters[1])) !== null && _b !== void 0 ? _b : '';
            if (!request.query) {
                return defaultValue;
            }
            return (0, utils_1.getValueFromPath)(request.query, path, defaultValue);
        },
        // use content from request header
        header: function (headerName, defaultValue) {
            if (typeof defaultValue === 'object') {
                defaultValue = '';
            }
            if (typeof headerName === 'object') {
                return defaultValue;
            }
            return request.get(headerName) || defaultValue;
        },
        // use value of cookie
        cookie: function (key, defaultValue) {
            if (typeof defaultValue === 'object') {
                defaultValue = '';
            }
            return request.cookies[key] || defaultValue;
        },
        // use request baseUrl
        baseUrl: function () {
            const prefix = environment.endpointPrefix
                ? `/${environment.endpointPrefix}`
                : '';
            const protocol = environment.tlsOptions.enabled ? 'https' : 'http';
            return `${protocol}://${request.hostname}:${environment.port}${prefix}`;
        },
        // use request hostname
        hostname: function () {
            return request.hostname;
        },
        // use request ip
        ip: function () {
            return request.ip;
        },
        // use request method
        method: function () {
            return request.method;
        }
    };
};
exports.RequestHelpers = RequestHelpers;
//# sourceMappingURL=request-helpers.js.map