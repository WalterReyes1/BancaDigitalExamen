"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockoonServer = void 0;
const commons_1 = require("@mockoon/commons");
const append_field_1 = __importDefault(require("append-field"));
const busboy_1 = __importDefault(require("busboy"));
const cookie_parser_1 = __importDefault(require("cookie-parser"));
const events_1 = require("events");
const express_1 = __importDefault(require("express"));
const fs_1 = require("fs");
const http_1 = require("http");
const http_proxy_middleware_1 = require("http-proxy-middleware");
const https_1 = require("https");
const killable_1 = __importDefault(require("killable"));
const mime_types_1 = require("mime-types");
const path_1 = require("path");
const qs_1 = require("qs");
const range_parser_1 = __importDefault(require("range-parser"));
const util_1 = require("util");
const xml_js_1 = require("xml-js");
const server_messages_constants_1 = require("../../constants/server-messages.constants");
const ssl_constants_1 = require("../../constants/ssl.constants");
const faker_1 = require("../faker");
const response_rules_interpreter_1 = require("../response-rules-interpreter");
const template_parser_1 = require("../template-parser");
const request_helpers_1 = require("../templating-helpers/request-helpers");
const utils_1 = require("../utils");
const admin_api_1 = require("./admin-api");
const crud_1 = require("./crud");
/**
 * Create a server instance from an Environment object.
 *
 * Extends EventEmitter.
 */
class MockoonServer extends events_1.EventEmitter {
    constructor(environment, options = {}) {
        var _a;
        super();
        this.environment = environment;
        this.tlsOptions = {};
        this.processedDatabuckets = [];
        // store the request number for each route
        this.requestNumbers = {};
        // templating global variables
        this.globalVariables = {};
        this.options = {
            disabledRoutes: [],
            envVarsPrefix: commons_1.defaultEnvironmentVariablesPrefix,
            enableAdminApi: true,
            disableTls: false,
            maxTransactionLogs: commons_1.defaultMaxTransactionLogs,
            enableRandomLatency: false
        };
        this.transactionLogs = [];
        /**
         * ### Middleware ###
         * Emit the SERVER_ENTERING_REQUEST event
         *
         * @param request
         * @param response
         * @param next
         */
        this.emitEvent = (request, response, next) => {
            this.emit('entering-request');
            next();
        };
        /**
         * ### Middleware ###
         * Add global latency to the mock server
         *
         * @param request
         * @param response
         * @param next
         */
        this.delayResponse = (request, response, next) => {
            this.refreshEnvironment();
            setTimeout(next, (0, commons_1.getLatency)(this.environment.latency, this.options.enableRandomLatency));
        };
        /**
         * ### Middleware ###
         * Parse entering request body
         *
         * @param request
         * @param response
         * @param next
         */
        this.parseBody = (request, response, next) => {
            // Parse body as a raw string and JSON/form if applicable
            const requestContentType = request.header('Content-Type');
            // body was already parsed (e.g. by firebase), 'data' event will not be emitted (⚠️ request.body will always be an empty object in Firebase Functions, we have to check rawBody too)
            if (!!request.body && request.rawBody) {
                this.processRawBody(request, next, [request.rawBody], requestContentType);
            }
            else {
                const rawBody = [];
                request.on('data', (chunk) => {
                    rawBody.push(Buffer.from(chunk, 'binary'));
                });
                request.on('end', () => {
                    this.processRawBody(request, next, rawBody, requestContentType);
                });
            }
        };
        /**
         * ### Middleware ###
         * Emit an event when response emit the 'close' event
         *
         * @param request
         * @param response
         * @param next
         */
        this.logRequest = (request, response, next) => {
            response.on('close', () => {
                this.emit('transaction-complete', (0, utils_1.CreateTransaction)(request, response));
                // store the transaction logs at beginning of the array
                this.transactionLogs.unshift((0, utils_1.CreateTransaction)(request, response));
                // keep only the last n transactions
                if (this.transactionLogs.length > this.options.maxTransactionLogs) {
                    this.transactionLogs.pop();
                }
                if (this.transactionLogs.length > this.options.maxTransactionLogs) {
                    this.transactionLogs = this.transactionLogs.slice(0, this.options.maxTransactionLogs);
                }
            });
            next();
        };
        /**
         * ### Middleware ###
         * Add environment headers & proxy headers to the response
         *
         * @param request
         * @param response
         * @param next
         */
        this.setResponseHeaders = (request, response, next) => {
            this.setHeaders(this.environment.headers, response, request);
            next();
        };
        /**
         * ### Middleware ###
         * Catch all error handler
         * http://expressjs.com/en/guide/error-handling.html#catching-errors
         *
         * @param server - server on which to log the response
         */
        this.errorHandler = (error, request, response, next) => {
            this.sendError(response, error, 500);
        };
        this.options = Object.assign(Object.assign(Object.assign({}, this.options), options), { envVarsPrefix: (_a = options.envVarsPrefix) !== null && _a !== void 0 ? _a : commons_1.defaultEnvironmentVariablesPrefix });
    }
    /**
     * Start a server
     */
    start() {
        const requestListener = this.createRequestListener();
        // create https or http server instance
        if (this.environment.tlsOptions.enabled && !this.options.disableTls) {
            try {
                this.tlsOptions = this.buildTLSOptions(this.environment);
                this.serverInstance = (0, https_1.createServer)(this.tlsOptions, requestListener);
            }
            catch (error) {
                if (error.code === 'ENOENT') {
                    this.emit('error', commons_1.ServerErrorCodes.CERT_FILE_NOT_FOUND, error);
                }
                else {
                    this.emit('error', commons_1.ServerErrorCodes.UNKNOWN_SERVER_ERROR, error);
                }
            }
        }
        else {
            this.serverInstance = (0, http_1.createServer)(requestListener);
        }
        // make serverInstance killable
        this.serverInstance = (0, killable_1.default)(this.serverInstance);
        // set timeout long enough to allow long latencies
        this.serverInstance.setTimeout(3600000);
        // handle server errors
        this.serverInstance.on('error', (error) => {
            let errorCode;
            switch (error.code) {
                case 'EADDRINUSE':
                    errorCode = commons_1.ServerErrorCodes.PORT_ALREADY_USED;
                    break;
                case 'EACCES':
                    errorCode = commons_1.ServerErrorCodes.PORT_INVALID;
                    break;
                case 'EADDRNOTAVAIL':
                    errorCode = commons_1.ServerErrorCodes.HOSTNAME_UNAVAILABLE;
                    break;
                case 'ENOTFOUND':
                    errorCode = commons_1.ServerErrorCodes.HOSTNAME_UNKNOWN;
                    break;
                default:
                    errorCode = commons_1.ServerErrorCodes.UNKNOWN_SERVER_ERROR;
            }
            this.emit('error', errorCode, error);
        });
        try {
            this.serverInstance.listen({ port: this.environment.port, host: this.environment.hostname }, () => {
                this.emit('started');
            });
        }
        catch (error) {
            if (error.code === 'ERR_SOCKET_BAD_PORT') {
                this.emit('error', commons_1.ServerErrorCodes.PORT_INVALID, error);
            }
        }
    }
    /**
     * Kill the server
     */
    stop() {
        if (this.serverInstance) {
            this.serverInstance.kill(() => {
                this.emit('stopped');
            });
        }
    }
    /**
     * Create a request listener
     */
    createRequestListener() {
        var _a, _b, _c, _d;
        /**
         * Apply faker.js settings at each server start.
         * Locale must be set before seed.
         * We do this in the request listener to allow changing the locale and seed from the serverless package too, which is not using the start/stop methods.
         */
        (0, faker_1.SetFakerLocale)((_b = (_a = this.options.fakerOptions) === null || _a === void 0 ? void 0 : _a.locale) !== null && _b !== void 0 ? _b : 'en');
        (0, faker_1.SetFakerSeed)((_d = (_c = this.options.fakerOptions) === null || _c === void 0 ? void 0 : _c.seed) !== null && _d !== void 0 ? _d : undefined);
        const app = (0, express_1.default)();
        app.disable('x-powered-by');
        app.disable('etag');
        this.generateDatabuckets(this.environment);
        // This middleware is required to parse the body for createAdminEndpoint requests
        app.use(this.parseBody);
        if (this.options.enableAdminApi) {
            // admin endpoint must be created before all other routes to avoid conflicts
            (0, admin_api_1.createAdminEndpoint)(app, {
                statePurgeCallback: () => {
                    // reset request numbers
                    Object.keys(this.requestNumbers).forEach((routeUUID) => {
                        this.requestNumbers[routeUUID] = 1;
                    });
                },
                setGlobalVariables: (key, value) => {
                    this.globalVariables[key] = value;
                },
                purgeGlobalVariables: () => {
                    this.globalVariables = {};
                },
                purgeDataBuckets: () => {
                    this.processedDatabuckets = [];
                    this.generateDatabuckets(this.environment);
                },
                getLogs: () => this.transactionLogs,
                purgeLogs: () => {
                    this.transactionLogs = [];
                }
            });
        }
        app.use(this.emitEvent);
        app.use(this.delayResponse);
        app.use(this.deduplicateRequestSlashes);
        app.use((0, cookie_parser_1.default)());
        app.use(this.logRequest);
        app.use(this.setResponseHeaders);
        this.setRoutes(app);
        this.setCors(app);
        this.enableProxy(app);
        app.use(this.errorHandler);
        return app;
    }
    /**
     * ### Middleware ###
     * Remove duplicate slashes in entering call paths
     *
     * @param request
     * @param response
     * @param next
     */
    deduplicateRequestSlashes(request, response, next) {
        request.url = (0, utils_1.dedupSlashes)(request.url);
        next();
    }
    /**
     * Process the raw body and parse it if needed
     *
     * @param request
     * @param next
     * @param rawBody
     * @param requestContentType
     */
    processRawBody(request, next, rawBody, requestContentType) {
        request.rawBody = Buffer.concat(rawBody);
        request.stringBody = request.rawBody.toString('utf8');
        try {
            if (requestContentType) {
                if ((0, commons_1.stringIncludesArrayItems)(commons_1.ParsedJSONBodyMimeTypes, requestContentType)) {
                    request.body = JSON.parse(request.stringBody);
                    next();
                }
                else if (requestContentType.includes('application/x-www-form-urlencoded')) {
                    request.body = (0, qs_1.parse)(request.stringBody, {
                        depth: 10
                    });
                    next();
                }
                else if (requestContentType.includes('multipart/form-data')) {
                    const busboyParse = (0, busboy_1.default)({
                        headers: request.headers,
                        limits: { fieldNameSize: 1000, files: 0 }
                    });
                    busboyParse.on('field', (name, value, info) => {
                        if (request.body === undefined) {
                            request.body = {};
                        }
                        if (name != null && !info.nameTruncated && !info.valueTruncated) {
                            (0, append_field_1.default)(request.body, name, value);
                        }
                    });
                    busboyParse.on('error', (error) => {
                        this.emit('error', commons_1.ServerErrorCodes.REQUEST_BODY_PARSE, error);
                        // we want to continue answering the call despite the parsing errors
                        next();
                    });
                    busboyParse.on('finish', () => {
                        next();
                    });
                    busboyParse.end(request.rawBody);
                }
                else if ((0, commons_1.stringIncludesArrayItems)(commons_1.ParsedXMLBodyMimeTypes, requestContentType)) {
                    request.body = (0, xml_js_1.xml2js)(request.stringBody, {
                        compact: true
                    });
                    next();
                }
                else {
                    next();
                }
            }
            else {
                next();
            }
        }
        catch (error) {
            this.emit('error', commons_1.ServerErrorCodes.REQUEST_BODY_PARSE, error);
            next();
        }
    }
    /**
     * Generate an environment routes and attach to running server
     *
     * @param server - server on which attach routes
     */
    setRoutes(server) {
        if (!this.environment.rootChildren ||
            this.environment.rootChildren.length < 1) {
            return;
        }
        const routes = (0, utils_1.routesFromFolder)(this.environment.rootChildren, this.environment.folders, this.environment.routes, this.options.disabledRoutes);
        routes.forEach((declaredRoute) => {
            const routePath = (0, utils_1.preparePath)(this.environment.endpointPrefix, declaredRoute.endpoint);
            try {
                this.requestNumbers[declaredRoute.uuid] = 1;
                if (declaredRoute.type === commons_1.RouteType.CRUD) {
                    this.createCRUDRoute(server, declaredRoute, routePath);
                }
                else {
                    this.createRESTRoute(server, declaredRoute, routePath);
                }
            }
            catch (error) {
                let errorCode = commons_1.ServerErrorCodes.ROUTE_CREATION_ERROR;
                // if invalid regex defined
                if (error.message.indexOf('Invalid regular expression') > -1) {
                    errorCode = commons_1.ServerErrorCodes.ROUTE_CREATION_ERROR_REGEX;
                }
                this.emit('error', errorCode, error, {
                    routePath: declaredRoute.endpoint,
                    routeUUID: declaredRoute.uuid
                });
            }
        });
    }
    /**
     * Create a regular REST route (GET, POST, etc.)
     *
     * @param server
     * @param route
     * @param routePath
     */
    createRESTRoute(server, route, routePath) {
        server[route.method](routePath, this.createRouteHandler(route));
    }
    /**
     * Create a CRUD route: GET, POST, PUT, PATCH, DELETE
     *
     * @param server
     * @param route
     * @param routePath
     */
    createCRUDRoute(server, route, routePath) {
        const crudRoutes = (0, crud_1.crudRoutesBuilder)(routePath);
        for (const crudRoute of crudRoutes) {
            server[crudRoute.method](crudRoute.path, this.createRouteHandler(route, crudRoute.id));
        }
    }
    createRouteHandler(route, crudId) {
        return (request, response, next) => {
            this.generateRequestDatabuckets(route, this.environment, request);
            // refresh environment data to get route changes that do not require a restart (headers, body, etc)
            this.refreshEnvironment();
            const currentRoute = this.getRefreshedRoute(route);
            if (!currentRoute) {
                this.emit('error', commons_1.ServerErrorCodes.ROUTE_NO_LONGER_EXISTS, null, {
                    routePath: route.endpoint,
                    routeUUID: route.uuid
                });
                this.sendError(response, server_messages_constants_1.ServerMessages.ROUTE_NO_LONGER_EXISTS, 404);
                return;
            }
            const enabledRouteResponse = new response_rules_interpreter_1.ResponseRulesInterpreter(currentRoute.responses, request, currentRoute.responseMode, this.environment, this.processedDatabuckets, this.globalVariables, this.options.envVarsPrefix).chooseResponse(this.requestNumbers[route.uuid]);
            if (!enabledRouteResponse) {
                return next();
            }
            this.requestNumbers[route.uuid] += 1;
            // save route and response UUIDs for logs (only in desktop app)
            if (route.uuid && enabledRouteResponse.uuid) {
                response.routeUUID = route.uuid;
                response.routeResponseUUID = enabledRouteResponse.uuid;
            }
            const latency = (0, commons_1.getLatency)(enabledRouteResponse.latency, this.options.enableRandomLatency);
            // add route latency if any
            setTimeout(() => {
                const contentType = (0, commons_1.GetRouteResponseContentType)(this.environment, enabledRouteResponse);
                const routeContentType = (0, commons_1.GetContentType)(enabledRouteResponse.headers);
                // set http code
                response.status(enabledRouteResponse.statusCode);
                this.setHeaders(enabledRouteResponse.headers, response, request);
                // send the file
                if (enabledRouteResponse.bodyType === commons_1.BodyTypes.FILE &&
                    enabledRouteResponse.filePath) {
                    this.sendFile(route, enabledRouteResponse, routeContentType, request, response);
                    // serve inline body or databucket
                }
                else {
                    let templateParse = true;
                    if (contentType.includes('application/json')) {
                        response.set('Content-Type', 'application/json');
                    }
                    // serve inline body as default
                    let content = enabledRouteResponse.body;
                    if (enabledRouteResponse.bodyType === commons_1.BodyTypes.DATABUCKET &&
                        enabledRouteResponse.databucketID) {
                        // databuckets are parsed at the server start or beginning of first request execution (no need to parse templating again)
                        templateParse = false;
                        const servedDatabucket = this.processedDatabuckets.find((processedDatabucket) => processedDatabucket.id === enabledRouteResponse.databucketID);
                        if (servedDatabucket) {
                            content = servedDatabucket.value;
                            if (route.type === commons_1.RouteType.CRUD && crudId) {
                                content = (0, crud_1.databucketActions)(crudId, servedDatabucket, request, response, currentRoute.responses[0].crudKey);
                            }
                            // if returned content is an array or object we need to stringify it for some values (array, object, booleans and numbers (bool and nb because expressjs cannot serve this as is))
                            if (Array.isArray(content) ||
                                typeof content === 'object' ||
                                typeof content === 'boolean' ||
                                typeof content === 'number') {
                                content = JSON.stringify(content);
                            }
                            else {
                                content = content;
                            }
                        }
                    }
                    this.serveBody(content || '', route, enabledRouteResponse, request, response, templateParse);
                }
            }, latency);
        };
    }
    makeCallbacks(routeResponse, request, response) {
        if (routeResponse.callbacks && routeResponse.callbacks.length > 0) {
            for (const invocation of routeResponse.callbacks) {
                const cb = this.environment.callbacks.find((ref) => ref.uuid === invocation.uuid);
                if (!cb) {
                    continue;
                }
                try {
                    const url = (0, template_parser_1.TemplateParser)({
                        shouldOmitDataHelper: false,
                        content: cb.uri,
                        environment: this.environment,
                        processedDatabuckets: this.processedDatabuckets,
                        globalVariables: this.globalVariables,
                        request,
                        response,
                        envVarsPrefix: this.options.envVarsPrefix
                    });
                    let content = cb.body;
                    let templateParse = true;
                    if (cb.bodyType === commons_1.BodyTypes.DATABUCKET && cb.databucketID) {
                        templateParse = false;
                        const servedDatabucket = this.processedDatabuckets.find((processedDatabucket) => processedDatabucket.id === cb.databucketID);
                        if (servedDatabucket) {
                            content = servedDatabucket.value;
                            // if returned content is an array or object we need to stringify it for some values (array, object, booleans and numbers (bool and nb because expressjs cannot serve this as is))
                            if (Array.isArray(content) ||
                                typeof content === 'object' ||
                                typeof content === 'boolean' ||
                                typeof content === 'number') {
                                content = JSON.stringify(content);
                            }
                            else {
                                content = content;
                            }
                        }
                    }
                    else if (cb.bodyType === commons_1.BodyTypes.FILE && cb.filePath) {
                        this.sendFileWithCallback(routeResponse, cb, invocation, request, response);
                        continue;
                    }
                    const sendingHeaders = {
                        headers: {}
                    };
                    this.setHeaders(cb.headers || [], sendingHeaders, request);
                    // apply templating if specified
                    if (!routeResponse.disableTemplating && templateParse) {
                        content = (0, template_parser_1.TemplateParser)({
                            shouldOmitDataHelper: false,
                            content: content || '',
                            environment: this.environment,
                            processedDatabuckets: this.processedDatabuckets,
                            globalVariables: this.globalVariables,
                            request,
                            response,
                            envVarsPrefix: this.options.envVarsPrefix
                        });
                    }
                    setTimeout(() => {
                        fetch(url, {
                            // uppercase even if most methods will work in lower case, but PACTH has to be uppercase or could be rejected by some servers (Node.js)
                            method: cb.method.toUpperCase(),
                            headers: sendingHeaders.headers,
                            body: (0, utils_1.isBodySupportingMethod)(cb.method) ? content : undefined
                        })
                            .then((res) => {
                            this.emitCallbackInvoked(res, cb, url, content, sendingHeaders.headers);
                        })
                            .catch((e) => this.emit('error', commons_1.ServerErrorCodes.CALLBACK_ERROR, e, {
                            callbackName: cb.name
                        }));
                    }, invocation.latency);
                }
                catch (error) {
                    this.emit('error', commons_1.ServerErrorCodes.CALLBACK_ERROR, error, {
                        callbackName: cb.name
                    });
                }
            }
        }
    }
    /**
     * Parse the body templating and send it as the response body
     *
     * @param routeResponse
     * @param request
     * @param response
     */
    serveBody(content, route, routeResponse, request, response, templateParse = true) {
        try {
            if (!routeResponse.disableTemplating && templateParse) {
                content = (0, template_parser_1.TemplateParser)({
                    shouldOmitDataHelper: false,
                    content: content || '',
                    environment: this.environment,
                    processedDatabuckets: this.processedDatabuckets,
                    globalVariables: this.globalVariables,
                    request,
                    response,
                    envVarsPrefix: this.options.envVarsPrefix
                });
            }
            this.applyResponseLocals(response);
            response.body = content;
            // execute callbacks after generating the template, to be able to use the eventual templating variables in the callback
            this.makeCallbacks(routeResponse, request, response);
            response.send(content);
        }
        catch (error) {
            this.emit('error', commons_1.ServerErrorCodes.ROUTE_SERVING_ERROR, error, {
                routePath: route.endpoint,
                routeUUID: route.uuid
            });
            this.sendError(response, (0, util_1.format)(server_messages_constants_1.ServerMessages.ROUTE_SERVING_ERROR, error.message));
        }
    }
    sendFileWithCallback(routeResponse, callback, invocation, request, response) {
        if (!callback.filePath) {
            return;
        }
        const fileServingError = (error) => {
            this.emit('error', commons_1.ServerErrorCodes.CALLBACK_FILE_ERROR, error, {
                callbackName: callback.name
            });
        };
        try {
            const url = (0, template_parser_1.TemplateParser)({
                shouldOmitDataHelper: false,
                content: callback.uri,
                environment: this.environment,
                processedDatabuckets: this.processedDatabuckets,
                globalVariables: this.globalVariables,
                request,
                response,
                envVarsPrefix: this.options.envVarsPrefix
            });
            let filePath = (0, template_parser_1.TemplateParser)({
                shouldOmitDataHelper: false,
                content: callback.filePath.replace(/\\/g, '/'),
                environment: this.environment,
                processedDatabuckets: this.processedDatabuckets,
                globalVariables: this.globalVariables,
                request,
                envVarsPrefix: this.options.envVarsPrefix
            });
            filePath = (0, utils_1.resolvePathFromEnvironment)(filePath, this.options.environmentDirectory);
            const fileMimeType = (0, mime_types_1.lookup)(filePath) || '';
            const sendingHeaders = {
                headers: {}
            };
            this.setHeaders(callback.headers || [], sendingHeaders, request);
            const definedContentType = sendingHeaders.headers['Content-Type'];
            // parse templating for a limited list of mime types
            try {
                if (!callback.sendFileAsBody) {
                    const buffer = (0, fs_1.readFileSync)(filePath);
                    const form = new FormData();
                    form.append('file', new Blob([buffer]));
                    setTimeout(() => {
                        fetch(url, {
                            // uppercase even if most methods will work in lower case, but PACTH has to be uppercase or could be rejected by some servers (Node.js)
                            method: callback.method.toUpperCase(),
                            body: form,
                            headers: sendingHeaders.headers
                        })
                            .then((res) => {
                            this.emitCallbackInvoked(res, callback, url, `<buffer of ${filePath}`, sendingHeaders.headers);
                        })
                            .catch((e) => this.emit('error', commons_1.ServerErrorCodes.CALLBACK_ERROR, e, {
                            callbackName: callback.name
                        }));
                    }, invocation.latency);
                }
                else {
                    const data = (0, fs_1.readFileSync)(filePath);
                    let fileContent;
                    if (commons_1.MimeTypesWithTemplating.indexOf(fileMimeType) > -1 &&
                        !routeResponse.disableTemplating) {
                        fileContent = (0, template_parser_1.TemplateParser)({
                            shouldOmitDataHelper: false,
                            content: data.toString(),
                            environment: this.environment,
                            processedDatabuckets: this.processedDatabuckets,
                            globalVariables: this.globalVariables,
                            request,
                            response,
                            envVarsPrefix: this.options.envVarsPrefix
                        });
                    }
                    else {
                        fileContent = data.toString();
                    }
                    // set content-type the detected mime type if any
                    if (!definedContentType && fileMimeType) {
                        sendingHeaders.headers['Content-Type'] = fileMimeType;
                    }
                    setTimeout(() => {
                        fetch(url, {
                            // uppercase even if most methods will work in lower case, but PACTH has to be uppercase or could be rejected by some servers (Node.js)
                            method: callback.method.toUpperCase(),
                            headers: sendingHeaders.headers,
                            body: fileContent
                        })
                            .then((res) => {
                            this.emitCallbackInvoked(res, callback, url, fileContent, sendingHeaders.headers);
                        })
                            .catch((e) => this.emit('error', commons_1.ServerErrorCodes.CALLBACK_ERROR, e, {
                            callbackName: callback.name
                        }));
                    }, invocation.latency);
                }
            }
            catch (error) {
                fileServingError(error);
            }
        }
        catch (error) {
            fileServingError(error);
        }
    }
    /**
     * Send a file as response body.
     * Revert to sendBody if file is not found.
     *
     * @param routeResponse
     * @param routeContentType
     * @param request
     * @param response
     */
    sendFile(route, routeResponse, routeContentType, request, response) {
        const fileServingError = (error) => {
            this.emit('error', commons_1.ServerErrorCodes.ROUTE_FILE_SERVING_ERROR, error, {
                routePath: route.endpoint,
                routeUUID: route.uuid
            });
            this.sendError(response, (0, util_1.format)(server_messages_constants_1.ServerMessages.ROUTE_FILE_SERVING_ERROR, error.message));
        };
        const errorThrowOrFallback = (error) => {
            if (routeResponse.fallbackTo404) {
                response.status(404);
                const content = routeResponse.body ? routeResponse.body : '';
                this.serveBody(content, route, routeResponse, request, response);
            }
            else {
                fileServingError(error);
            }
        };
        try {
            let filePath = (0, template_parser_1.TemplateParser)({
                shouldOmitDataHelper: false,
                content: routeResponse.filePath.replace(/\\/g, '/'),
                environment: this.environment,
                processedDatabuckets: this.processedDatabuckets,
                globalVariables: this.globalVariables,
                request,
                envVarsPrefix: this.options.envVarsPrefix
            });
            filePath = (0, utils_1.resolvePathFromEnvironment)(filePath, this.options.environmentDirectory);
            const fileMimeType = (0, mime_types_1.lookup)(filePath) || '';
            // set content-type the detected mime type if any
            if (!routeContentType && fileMimeType) {
                response.set('Content-Type', fileMimeType);
            }
            if (!routeResponse.sendFileAsBody) {
                response.set('Content-Disposition', `attachment; filename="${(0, path_1.basename)(filePath)}"`);
            }
            // parse templating for a limited list of mime types
            if ((commons_1.MimeTypesWithTemplating.indexOf(fileMimeType) > -1 ||
                commons_1.FileExtensionsWithTemplating.indexOf((0, path_1.extname)(filePath)) > -1) &&
                !routeResponse.disableTemplating) {
                (0, fs_1.readFile)(filePath, (readError, data) => {
                    if (readError) {
                        errorThrowOrFallback(readError);
                        return;
                    }
                    try {
                        const fileContent = (0, template_parser_1.TemplateParser)({
                            shouldOmitDataHelper: false,
                            content: data.toString(),
                            environment: this.environment,
                            processedDatabuckets: this.processedDatabuckets,
                            globalVariables: this.globalVariables,
                            request,
                            response,
                            envVarsPrefix: this.options.envVarsPrefix
                        });
                        this.applyResponseLocals(response);
                        response.body = fileContent;
                        // execute callbacks after generating the file content, to be able to use the eventual templating variables in the callback
                        this.makeCallbacks(routeResponse, request, response);
                        response.send(fileContent);
                    }
                    catch (error) {
                        fileServingError(error);
                    }
                });
            }
            else {
                try {
                    const rangeHeader = request.headers.range;
                    const { size } = (0, fs_1.statSync)(filePath);
                    response.body = commons_1.BINARY_BODY;
                    let stream = (0, fs_1.createReadStream)(filePath);
                    this.setHeaders([
                        {
                            key: 'Content-Length',
                            value: size.toString()
                        }
                    ], response, request);
                    if (rangeHeader) {
                        const parsedRange = (0, range_parser_1.default)(size, rangeHeader);
                        // unsatisfiable range
                        if (parsedRange === -1) {
                            this.sendError(response, 'Requested range not satisfiable', 416);
                            return;
                        }
                        else if (parsedRange === -2) {
                            // malformed header
                            this.sendError(response, 'Malformed range header', 400);
                            return;
                        }
                        else if (parsedRange) {
                            const start = parsedRange[0].start;
                            const end = parsedRange[0].end;
                            const chunksize = end - start + 1;
                            stream = (0, fs_1.createReadStream)(filePath, { start, end });
                            this.setHeaders([
                                {
                                    key: 'Content-Range',
                                    value: `bytes ${start}-${end}/${size}`
                                },
                                {
                                    key: 'Accept-Ranges',
                                    value: 'bytes'
                                },
                                {
                                    key: 'Content-Length',
                                    value: chunksize.toString()
                                },
                                {
                                    key: 'Content-Type',
                                    value: fileMimeType
                                }
                            ], response, request);
                            response.status(206);
                            stream = (0, fs_1.createReadStream)(filePath, { start, end });
                        }
                    }
                    this.makeCallbacks(routeResponse, request, response);
                    stream.pipe(response);
                }
                catch (error) {
                    errorThrowOrFallback(error);
                }
            }
        }
        catch (error) {
            this.emit('error', commons_1.ServerErrorCodes.ROUTE_SERVING_ERROR, error, {
                routePath: route.endpoint,
                routeUUID: route.uuid
            });
            this.sendError(response, (0, util_1.format)(server_messages_constants_1.ServerMessages.ROUTE_SERVING_ERROR, error.message));
        }
    }
    /**
     * Always answer with status 200 to CORS pre flight OPTIONS requests if option activated.
     * /!\ Must be called after the routes creation otherwise it will intercept all user defined OPTIONS routes.
     *
     * @param server - express instance
     */
    setCors(server) {
        if (this.environment.cors) {
            server.options('/*', (req, res) => {
                this.refreshEnvironment();
                // override default CORS headers with environment's headers
                this.setHeaders([...commons_1.CORSHeaders, ...this.environment.headers], res, req);
                res.status(200).end();
            });
        }
    }
    /**
     * Add catch-all proxy if enabled.
     * Restream the body to the proxied API because it already has been
     * intercepted by the body parser.
     *
     * @param server - server on which to launch the proxy
     */
    enableProxy(server) {
        if (this.environment.proxyMode &&
            this.environment.proxyHost &&
            (0, commons_1.IsValidURL)(this.environment.proxyHost)) {
            this.emit('creating-proxy');
            server.use('*', (0, http_proxy_middleware_1.createProxyMiddleware)({
                cookieDomainRewrite: { '*': '' },
                target: this.environment.proxyHost,
                secure: false,
                changeOrigin: true,
                logLevel: 'silent',
                pathRewrite: (path, req) => {
                    if (this.environment.proxyRemovePrefix === true &&
                        this.environment.endpointPrefix.length > 0) {
                        const regExp = new RegExp(`^/${this.environment.endpointPrefix}`);
                        return path.replace(regExp, '');
                    }
                    return path;
                },
                ssl: Object.assign(Object.assign({}, this.tlsOptions), { agent: false }),
                onProxyReq: (proxyReq, request, response) => {
                    this.refreshEnvironment();
                    request.proxied = true;
                    this.setHeaders(this.environment.proxyReqHeaders, proxyReq, request);
                    // re-stream the body (intercepted by body parser method)
                    if (request.rawBody) {
                        proxyReq.write(request.rawBody);
                    }
                },
                onProxyRes: (proxyRes, request, response) => {
                    this.refreshEnvironment();
                    const buffers = [];
                    proxyRes.on('data', (chunk) => {
                        buffers.push(chunk);
                    });
                    proxyRes.on('end', () => {
                        response.body = Buffer.concat(buffers);
                    });
                    this.setHeaders(this.environment.proxyResHeaders, proxyRes, request);
                },
                onError: (error, request, response) => {
                    this.emit('error', commons_1.ServerErrorCodes.PROXY_ERROR, error);
                    this.sendError(response, `${(0, util_1.format)(server_messages_constants_1.ServerMessages.PROXY_ERROR, this.environment.proxyHost)} ${request.url}: ${error}`, 504);
                }
            }));
        }
    }
    /**
     * Set the provided headers on the target. Use different headers accessors
     * depending on the type of target:
     * express.Response/http.OutgoingMessage/http.IncomingMessage
     * Use the source in the template parsing of each header value.
     *
     * @param headers
     * @param target
     * @param request
     */
    setHeaders(headers, target, request) {
        headers.forEach((header) => {
            try {
                const isSetCookie = header.key.toLowerCase() === 'set-cookie';
                let parsedHeaderValue = this.parseHeader(header, request);
                if (parsedHeaderValue === null) {
                    return;
                }
                if (target.set) {
                    // for express.Response
                    if (isSetCookie) {
                        target.append(header.key, parsedHeaderValue);
                    }
                    else {
                        target.set(header.key, parsedHeaderValue);
                    }
                }
                else if (target.setHeader) {
                    // for proxy http.OutgoingMessage | ClientRequest
                    target.setHeader(header.key, parsedHeaderValue);
                }
                else {
                    // for http.IncomingMessage
                    if (isSetCookie) {
                        // Remove the secure flag
                        parsedHeaderValue = parsedHeaderValue.replace(/; secure/gi, '');
                        target.headers[header.key] = this.appendHeaderValue(target.headers[header.key], parsedHeaderValue);
                    }
                    else {
                        target.headers[header.key] = parsedHeaderValue;
                    }
                }
            }
            catch (error) { }
        });
    }
    /**
     * If header already has a value, concatenate the values into an array
     *
     * @param currentValue
     * @param newValue
     * @returns
     */
    appendHeaderValue(currentValue, newValue) {
        let headerValue = newValue;
        if (currentValue) {
            headerValue = Array.isArray(currentValue)
                ? currentValue.concat(headerValue)
                : [currentValue, headerValue];
        }
        return headerValue;
    }
    /**
     * Verify a header validity and parse its content, if templating is used
     *
     * @param header
     * @param request
     * @returns
     */
    parseHeader(header, request) {
        let parsedHeaderValue = null;
        if (header.key && header.value) {
            try {
                parsedHeaderValue = (0, template_parser_1.TemplateParser)({
                    shouldOmitDataHelper: false,
                    content: header.value,
                    environment: this.environment,
                    processedDatabuckets: this.processedDatabuckets,
                    globalVariables: this.globalVariables,
                    request,
                    envVarsPrefix: this.options.envVarsPrefix
                });
            }
            catch (error) {
                this.emit('error', commons_1.ServerErrorCodes.HEADER_PARSING_ERROR, error, {
                    headerKey: header.key,
                    headerValue: header.value
                });
                parsedHeaderValue = server_messages_constants_1.ServerMessages.HEADER_PARSING_ERROR_LIGHT;
            }
        }
        return parsedHeaderValue;
    }
    /**
     * Send an error with text/plain content type, the provided message and status code.
     * Status is optional. No status will default to the one defined by the user, allowing for maximum customization.
     *
     * @param response
     * @param errorMessage
     * @param status
     */
    sendError(response, errorMessage, status) {
        response.set('Content-Type', 'text/plain');
        response.body = errorMessage;
        if (errorMessage instanceof Error) {
            errorMessage = errorMessage.message;
        }
        if (status !== undefined) {
            response.status(status);
        }
        response.send(errorMessage);
    }
    /**
     * Emit callback invoked event.
     *
     * @param res
     * @param callback
     * @param url
     * @param requestBody
     * @param requestHeaders
     */
    emitCallbackInvoked(res, callback, url, requestBody, requestHeaders) {
        res.text().then((respText) => {
            const reqHeaders = Object.keys(requestHeaders).map((k) => ({ key: k, value: requestHeaders[k] }));
            this.emit('callback-invoked', (0, utils_1.CreateCallbackInvocation)(callback, url, requestBody, reqHeaders, res, respText));
        });
    }
    /**
     * Request an updated environment to allow
     * modification of some parameters without a restart (latency, headers, etc)
     */
    refreshEnvironment() {
        if (this.options.refreshEnvironmentFunction && this.environment.uuid) {
            const updatedEnvironment = this.options.refreshEnvironmentFunction(this.environment.uuid);
            if (updatedEnvironment) {
                this.environment = updatedEnvironment;
            }
        }
    }
    /**
     * Request an updated route to allow
     * modification of some parameters without a restart (latency, headers, etc)
     * This only makes sense if the refreshEnvironmentFunction has been provided.
     *
     * @param routeUUID
     */
    getRefreshedRoute(currentRoute) {
        if (this.options.refreshEnvironmentFunction && this.environment.uuid) {
            return this.environment.routes.find((route) => route.uuid === currentRoute.uuid);
        }
        return currentRoute;
    }
    /**
     * Build the secure context options
     * - if custom cert are provided load them
     * - if not, use default TLS cert (self-signed)
     *
     * @returns
     */
    buildTLSOptions(environment) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        let tlsOptions = {};
        const processTemplating = (content) => (0, template_parser_1.TemplateParser)({
            content,
            shouldOmitDataHelper: false,
            environment,
            processedDatabuckets: this.processedDatabuckets,
            globalVariables: this.globalVariables,
            envVarsPrefix: this.options.envVarsPrefix
        });
        if (((_a = environment.tlsOptions) === null || _a === void 0 ? void 0 : _a.pfxPath) ||
            (((_b = environment.tlsOptions) === null || _b === void 0 ? void 0 : _b.certPath) && ((_c = environment.tlsOptions) === null || _c === void 0 ? void 0 : _c.keyPath))) {
            if (((_d = environment.tlsOptions) === null || _d === void 0 ? void 0 : _d.type) === 'PFX' &&
                ((_e = environment.tlsOptions) === null || _e === void 0 ? void 0 : _e.pfxPath)) {
                tlsOptions.pfx = (0, fs_1.readFileSync)((0, utils_1.resolvePathFromEnvironment)(processTemplating((_f = environment.tlsOptions) === null || _f === void 0 ? void 0 : _f.pfxPath), this.options.environmentDirectory));
            }
            else if (((_g = environment.tlsOptions) === null || _g === void 0 ? void 0 : _g.type) === 'CERT' &&
                ((_h = environment.tlsOptions) === null || _h === void 0 ? void 0 : _h.certPath) &&
                ((_j = environment.tlsOptions) === null || _j === void 0 ? void 0 : _j.keyPath)) {
                tlsOptions.cert = (0, fs_1.readFileSync)((0, utils_1.resolvePathFromEnvironment)(processTemplating((_k = environment.tlsOptions) === null || _k === void 0 ? void 0 : _k.certPath), this.options.environmentDirectory));
                tlsOptions.key = (0, fs_1.readFileSync)((0, utils_1.resolvePathFromEnvironment)(processTemplating((_l = environment.tlsOptions) === null || _l === void 0 ? void 0 : _l.keyPath), this.options.environmentDirectory));
            }
            if ((_m = environment.tlsOptions) === null || _m === void 0 ? void 0 : _m.caPath) {
                tlsOptions.ca = (0, fs_1.readFileSync)((0, utils_1.resolvePathFromEnvironment)(processTemplating((_o = environment.tlsOptions) === null || _o === void 0 ? void 0 : _o.caPath), this.options.environmentDirectory));
            }
            if ((_p = environment.tlsOptions) === null || _p === void 0 ? void 0 : _p.passphrase) {
                tlsOptions.passphrase = processTemplating((_q = environment.tlsOptions) === null || _q === void 0 ? void 0 : _q.passphrase);
            }
        }
        else {
            tlsOptions = Object.assign({}, ssl_constants_1.DefaultTLSOptions);
        }
        return tlsOptions;
    }
    /**
     * Parse all databuckets in the environment and set their parsed value to true except if they contain request helpers
     * @param environment
     */
    generateDatabuckets(environment) {
        if (environment.data.length > 0) {
            environment.data.forEach((databucket) => {
                let newProcessedDatabucket;
                if (databucket.value.match(new RegExp(`{{2,3}[#(\\s\\w]*(${request_helpers_1.requestHelperNames.join('|')})`))) {
                    // a request helper was found
                    newProcessedDatabucket = {
                        id: databucket.id,
                        name: databucket.name,
                        value: databucket.value,
                        parsed: false
                    };
                }
                else {
                    let templateParsedContent;
                    try {
                        templateParsedContent = (0, template_parser_1.TemplateParser)({
                            shouldOmitDataHelper: false,
                            content: databucket.value,
                            environment,
                            processedDatabuckets: this.processedDatabuckets,
                            globalVariables: this.globalVariables,
                            envVarsPrefix: this.options.envVarsPrefix
                        });
                        const JSONParsedContent = JSON.parse(templateParsedContent);
                        newProcessedDatabucket = {
                            id: databucket.id,
                            name: databucket.name,
                            value: JSONParsedContent,
                            parsed: true
                        };
                    }
                    catch (error) {
                        if (error instanceof SyntaxError) {
                            newProcessedDatabucket = {
                                id: databucket.id,
                                name: databucket.name,
                                value: templateParsedContent,
                                parsed: true
                            };
                        }
                        else {
                            newProcessedDatabucket = {
                                id: databucket.id,
                                name: databucket.name,
                                value: error.message,
                                parsed: true
                            };
                        }
                    }
                }
                this.processedDatabuckets.push(newProcessedDatabucket);
            });
        }
    }
    /**
     * Returns list of matched databucket ids in the given text.
     *
     * @param data text to be searched for possible databucket ids
     */
    extractDatabucketIdsFromString(text) {
        const matches = text === null || text === void 0 ? void 0 : text.matchAll(new RegExp('data(?:Raw)? +[\'|"]{1}([^(\'|")]*)', 'g'));
        return [...(matches || [])].map((match) => match[1]);
    }
    /**
     * Find and returns all unique databucket ids specified in callbacks
     * of the given response.
     * To achieve null safety, this will always return an empty set if no callbacks
     * have been defined.
     *
     * @param response
     * @param environment
     */
    findDatabucketIdsInCallbacks(response, environment) {
        let dataBucketIds = [];
        if (response.callbacks && response.callbacks.length > 0) {
            for (const invocation of response.callbacks) {
                const callback = environment.callbacks.find((envCallback) => envCallback.uuid === invocation.uuid);
                if (!callback) {
                    continue;
                }
                dataBucketIds = [
                    ...dataBucketIds,
                    ...this.extractDatabucketIdsFromString(callback.uri),
                    ...this.extractDatabucketIdsFromString(callback.body),
                    ...this.extractDatabucketIdsFromString(callback.filePath),
                    ...this.findDatabucketIdsInHeaders(callback.headers)
                ];
                if (callback.databucketID) {
                    dataBucketIds.push(callback.databucketID);
                }
            }
        }
        return dataBucketIds;
    }
    /**
     * Find data buckets referenced in the provided headers
     *
     * @param headers
     */
    findDatabucketIdsInHeaders(headers) {
        return headers.reduce((acc, header) => [
            ...acc,
            ...this.extractDatabucketIdsFromString(header.value)
        ], []);
    }
    /**
     * Find databucket ids in the rules target and value of the given response
     *
     * @param response
     */
    findDatabucketIdsInRules(response) {
        let dataBucketIds = [];
        response.rules.forEach((rule) => {
            const splitRules = rule.modifier.split('.');
            if (rule.target === 'data_bucket') {
                dataBucketIds = [
                    ...dataBucketIds,
                    // split by dots, take first section, or second if first is a dollar
                    splitRules[0].startsWith('$') ? splitRules[1] : splitRules[0],
                    ...this.extractDatabucketIdsFromString(rule.value)
                ];
            }
        });
        return dataBucketIds;
    }
    /**
     * Generate the databuckets that were not parsed at the server start
     *
     * @param route
     * @param environment
     * @param request
     */
    generateRequestDatabuckets(route, environment, request) {
        // do not continue if all the buckets were previously parsed
        if (!this.processedDatabuckets.some((processedDatabucket) => !processedDatabucket.parsed)) {
            return;
        }
        let databucketIdsToParse = new Set();
        // find databucket ids in environment headers
        this.findDatabucketIdsInHeaders(environment.headers).forEach((dataBucketId) => databucketIdsToParse.add(dataBucketId));
        route.responses.forEach((response) => {
            // capture databucket ids in body and relevant callback definitions
            [
                ...this.findDatabucketIdsInHeaders(response.headers),
                ...this.extractDatabucketIdsFromString(response.body),
                ...this.extractDatabucketIdsFromString(response.filePath),
                ...this.findDatabucketIdsInCallbacks(response, environment),
                ...this.findDatabucketIdsInRules(response)
            ].forEach((dataBucketId) => databucketIdsToParse.add(dataBucketId));
            if (response.databucketID) {
                databucketIdsToParse.add(response.databucketID);
            }
        });
        // capture databucket ids in found databuckets to allow for nested databucket parsing
        let nestedDatabucketIds = [];
        environment.data.forEach((databucket) => {
            if (databucketIdsToParse.has(databucket.id) ||
                [...databucketIdsToParse.keys()].some((id) => databucket.name.toLowerCase().includes(id.toLowerCase()))) {
                nestedDatabucketIds = [
                    ...this.extractDatabucketIdsFromString(databucket.value)
                ];
            }
        });
        // add nested databucket ids at the beginning of the set to ensure they are parsed first
        databucketIdsToParse = new Set([
            ...nestedDatabucketIds,
            ...databucketIdsToParse
        ]);
        if (databucketIdsToParse.size > 0) {
            let targetDatabucket;
            for (const databucketIdToParse of databucketIdsToParse) {
                targetDatabucket = this.processedDatabuckets.find((databucket) => databucket.id === databucketIdToParse ||
                    databucket.name
                        .toLowerCase()
                        .includes(databucketIdToParse.toLowerCase()));
                if (targetDatabucket && !(targetDatabucket === null || targetDatabucket === void 0 ? void 0 : targetDatabucket.parsed)) {
                    let content = targetDatabucket.value;
                    try {
                        content = (0, template_parser_1.TemplateParser)({
                            shouldOmitDataHelper: false,
                            content: targetDatabucket.value,
                            environment,
                            processedDatabuckets: this.processedDatabuckets,
                            globalVariables: this.globalVariables,
                            request,
                            envVarsPrefix: this.options.envVarsPrefix
                        });
                        const JSONParsedcontent = JSON.parse(content);
                        targetDatabucket.value = JSONParsedcontent;
                        targetDatabucket.parsed = true;
                    }
                    catch (error) {
                        if (error instanceof SyntaxError) {
                            targetDatabucket.value = content;
                        }
                        else {
                            targetDatabucket.value = error.message;
                        }
                        targetDatabucket.parsed = true;
                    }
                }
            }
        }
    }
    /**
     * Set response properties from the locals object.
     * Currently supports the statusCode that can be set using templating helper.
     *
     * @param response
     */
    applyResponseLocals(response) {
        if (response.locals.statusCode !== undefined) {
            response.status(response.locals.statusCode);
        }
    }
}
exports.MockoonServer = MockoonServer;
//# sourceMappingURL=server.js.map