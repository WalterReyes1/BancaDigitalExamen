import { Callback, Folder, FolderChild, Header, InvokedCallback, Methods, Route, Transaction } from '@mockoon/commons';
import { Request, Response } from 'express';
import { SafeString } from 'handlebars';
/**
 * Check if an Object or Array is empty
 *
 * @param obj
 */
export declare const IsEmpty: (obj: any) => boolean;
/**
 * Decompress body based on content-encoding
 *
 * @param response
 */
export declare const DecompressBody: (response: Response) => any;
/**
 * Returns true if given HTTP method is a body supporting one. Otherwise false.
 * @param method
 */
export declare function isBodySupportingMethod(method: Methods): boolean;
/**
 * Creates a callback invocation record which has information
 * about the invoked details.
 * @param callback
 * @param url
 * @param requestBody
 * @param requestHeaders
 * @param fetchResponse
 * @param responseBody
 */
export declare function CreateCallbackInvocation(callback: Callback, url: string, requestBody: string | null | undefined, requestHeaders: Header[], fetchResponse: globalThis.Response, responseBody: any): InvokedCallback;
/**
 * Create a Transaction object from express req/res.
 * To be used after the response closes
 *
 * @param request
 * @param response
 */
export declare function CreateTransaction(request: Request, response: Response): Transaction;
/**
 * Convert a string to base64
 *
 * @param text
 */
export declare const ToBase64: (text: string) => string;
/**
 * Convert base64 to a string
 *
 * @param base64
 */
export declare const FromBase64: (base64: string) => string;
/**
 * Convert a SafeString to a string if needed.
 *
 * @param text
 * @returns
 */
export declare const fromSafeString: (text: string | SafeString) => string;
/**
 * Parse a number from a SafeString if needed.
 *
 * @param text
 * @returns
 */
export declare const numberFromSafeString: (text: string | SafeString) => number;
/**
 *
 * @param text
 * @returns object | null
 */
export declare const objectFromSafeString: (text: string | SafeString) => any;
/**
 * Resolve a file path relatively to the current environment folder if provided
 */
export declare const resolvePathFromEnvironment: (filePath: string, environmentDirectory?: string) => string;
/**
 * Convert an object path (for the object-path lib) containing escaped dots '\.'
 * to an array of strings to allow fetching properties containing dots.
 *
 * Example:
 * 'get.a.property\.with\.dots => ['get', 'a', 'property.with.dots']
 *
 * To query an object like this:
 *
 * ```
 * {
 *   get: {
 *     a: {
 *       'propery.with.dots': "value"
 *     }
 *   }
 * }
 * ```
 * @param str
 */
export declare const convertPathToArray: (str: string) => string | string[];
/**
 * List routes in the order they appear in a folder children array (can be called recursively)
 *
 * If exclude is provided, it will exclude the routes with the provided UUIDs, or the routes in the provided folders by keyword in the folder name
 *
 * @param folderChildren
 * @param allFolders
 * @param allRoutes
 * @param exclude
 * @returns
 */
export declare const routesFromFolder: (folderChildren: FolderChild[], allFolders: Folder[], allRoutes: Route[], exclude?: string[]) => Route[];
/**
 * Remove duplicate slashes from a string
 *
 * @param str
 * @returns
 */
export declare const dedupSlashes: (str: string) => string;
/**
 * Prepare a path for express: add a leading slash, deduplicate slashes and replace spaces with %20
 *
 * @param endpointPrefix
 * @param endpoint
 * @returns
 */
export declare const preparePath: (endpointPrefix: string, endpoint: string) => string;
/**
 * Perform a full text search on an object. The object can be any valid JSON type
 *
 * @param object
 * @param query
 * @returns
 */
export declare const fullTextSearch: (object: unknown, query: string) => boolean;
/**
 * Look for a value in an object or array using a path (dot notation or JSONPath).
 * If no path is provided, return the full data.
 * If the value is not found, return the default value.
 *
 * @param data
 * @param path
 * @param defaultValue
 * @returns
 */
export declare const getValueFromPath: (data: any, path: string, defaultValue: any) => any;
