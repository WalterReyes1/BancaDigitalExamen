import { RouteDefault, RouteResponseDefault } from '../constants/environment-schema.constants';
import { Callback, DataBucket, Environment } from '../models/environment.model';
import { Folder } from '../models/folder.model';
import { BodyTypes, CallbackInvocation, Header, Methods, ResponseRule, Route, RouteResponse } from '../models/route.model';
/**
 * Build a new environment or route response header
 */
export declare const BuildHeader: (key?: string, value?: string) => Header;
/**
 * Build a new route response
 */
export declare const BuildRouteResponse: () => RouteResponse;
/**
 * Build a new response rule
 */
export declare const BuildResponseRule: () => ResponseRule;
/**
 * Build a new callback request.
 */
export declare const BuildResponseCallback: (defaultCallbackUuid?: string) => CallbackInvocation;
/**
 * Clone a new route response with a fresh UUID.
 * Make sure to reset default to false, as we can never have two default responses (also for CRUD the default is the one doing the CRUD operations).
 */
export declare const CloneRouteResponse: (routeResponse: RouteResponse) => RouteResponse;
/**
 * Clone a databucket with a renewd ids
 *
 * @param dataBucket
 * @returns
 */
export declare const CloneDataBucket: (dataBucket: DataBucket) => DataBucket;
/**
 * Clones a callback. We use the same strategy for id generation similar to data buckets.
 *
 * @param callback callback to clone
 * @returns cloned callback.
 */
export declare const CloneCallback: (callback: Callback) => {
    uuid: any;
    id: string;
    name: string;
    documentation: string;
    method: Methods;
    uri: string;
    headers: Header[];
    body?: string;
    filePath?: string;
    sendFileAsBody?: boolean;
    bodyType: BodyTypes;
    databucketID?: string;
};
/**
 * Build a new folder object in the folder tree
 */
export declare const BuildFolder: () => Folder;
/**
 * Build a new HTTP route
 */
export declare const BuildHTTPRoute: (hasDefaultRouteResponse?: boolean, options?: {
    endpoint: typeof RouteDefault.endpoint;
    body: typeof RouteResponseDefault.body;
}) => Route;
/**
 * Build a new CRUD route
 */
export declare const BuildCRUDRoute: (hasDefaultRouteResponse?: boolean, options?: {
    endpoint: typeof RouteDefault.endpoint;
    databucketID: typeof RouteResponseDefault.databucketID;
}) => Route;
/**
 * Build a new databucket
 */
export declare const BuildDatabucket: (dataBucket?: Partial<DataBucket>) => DataBucket;
/**
 * Build a new callback.
 */
export declare const BuildCallback: () => Callback;
/**
 * Build a new environment
 */
export declare const BuildEnvironment: (params?: {
    hasDefaultRoute: boolean;
    hasDefaultHeader: boolean;
    port?: number;
}) => Environment;
/**
 * Build a demo environment when starting the application for the first time
 */
export declare const BuildDemoEnvironment: () => Environment;
