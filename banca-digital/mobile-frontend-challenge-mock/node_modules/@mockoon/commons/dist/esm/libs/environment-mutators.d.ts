import { Callback, DataBucket, Environment } from '../models/environment.model';
import { Folder } from '../models/folder.model';
import { ReorderAction, ReorderableContainers } from '../models/reorder.model';
import { Route, RouteResponse } from '../models/route.model';
/**
 * Update an environment direct properties
 *
 * @param environment
 * @param properties
 * @returns
 */
export declare const updateEnvironmentMutator: (environment: Environment, properties: Partial<Environment>) => Environment;
/**
 * Add a route to an environment, and insert it in the root level or in a folder
 *
 * @param environment
 * @param newRoute
 * @param parentId
 * @returns
 */
export declare const addRouteMutator: (environment: Environment, newRoute: Route, parentId: string | "root") => Environment;
/**
 * Update a route direct properties in an environment
 *
 * @param environment
 * @param routeUuid
 * @param properties
 * @returns
 */
export declare const updateRouteMutator: (environment: Environment, routeUuid: string, properties: Partial<Route>) => Environment;
/**
 * Remove a route from an environment, and remove it from the root level or from a folder
 *
 * @param environment
 * @param routeUuid
 * @returns
 */
export declare const removeRouteMutator: (environment: Environment, routeUuid: string) => Environment;
/**
 * Reorder a route in an environment
 *
 * @param environment
 * @param reorderAction
 * @returns
 */
export declare const reorderRoutesMutator: (environment: Environment, reorderAction: ReorderAction<string>) => Environment;
/**
 * Reorder a route response in an environment
 *
 * @param environment
 * @param routeUuid
 * @param reorderAction
 * @returns
 */
export declare const reorderRouteResponseMutator: (environment: Environment, routeUuid: string, reorderAction: ReorderAction<string>) => Environment;
/**
 * Reorder a databucket in an environment
 *
 * @param environment
 * @param reorderAction
 * @returns
 */
export declare const reorderDatabucketMutator: (environment: Environment, reorderAction: ReorderAction<string>) => Environment;
/**
 *  Reorder a callback in an environment
 *
 * @param environment
 * @param reorderAction
 * @returns
 */
export declare const reorderCallbackMutator: (environment: Environment, reorderAction: ReorderAction<string>) => Environment;
/**
 * Add a folder to an environment, and insert it in the root level or in a folder
 *
 * @param environment
 * @param newFolder
 * @param parentId
 * @returns
 */
export declare const addFolderMutator: (environment: Environment, newFolder: Folder, parentId: string | "root") => Environment;
/**
 * Update a folder direct properties in an environment
 *
 * @param environment
 * @param folderUuid
 * @param properties
 * @returns
 */
export declare const updateFolderMutator: (environment: Environment, folderUuid: string, properties: Partial<Folder>) => Environment;
/**
 * Remove a folder from an environment, and remove it from the root level or from a folder
 *
 * @param environment
 * @param folderUuid
 * @returns
 */
export declare const removeFolderMutator: (environment: Environment, folderUuid: string) => Environment;
/**
 * Insert a databucket in an environment
 *
 * @param environment
 * @param newDataBucket
 * @param insertAfterUuid
 * @returns
 */
export declare const addDatabucketMutator: (environment: Environment, newDatabucket: DataBucket, insertAfterUuid?: string) => Environment;
/**
 * Update a databucket direct properties in an environment
 * @param environment
 * @param databucketUuid
 * @param properties
 * @returns
 */
export declare const updateDatabucketMutator: (environment: Environment, databucketUuid: string, properties: Partial<DataBucket>) => Environment;
/**
 * Remove a databucket from an environment.
 * Remove the databucket id in all routes responses that use this databucket
 *
 * @param environment
 * @param databucketUuid
 */
export declare const removeDatabucketMutator: (environment: Environment, databucketUuid: string) => Environment;
/**
 * Add a route response to a route in an environment
 *
 * @param environment
 * @param routeUuid
 * @param newRouteResponse
 * @param insertAfterUuid
 * @returns
 */
export declare const addRouteResponseMutator: (environment: Environment, routeUuid: string, newRouteResponse: RouteResponse, insertAfterUuid?: string) => Environment;
/**
 * Update a route response properties in an environment
 *
 * @param environment
 * @param routeUuid
 * @param routeResponseUuid
 * @param properties
 * @returns
 */
export declare const updateRouteResponseMutator: (environment: Environment, routeUuid: string, routeResponseUuid: string, properties: Partial<RouteResponse>) => Environment;
/**
 * Remove a route response from a route in an environment
 *
 * @param environment
 * @param routeUuid
 * @param routeResponseUuid
 */
export declare const removeRouteResponseMutator: (environment: Environment, routeUuid: string, routeResponseUuid: string) => Environment;
/**
 * Add a callback to an environment
 *
 * @param environment
 * @param newCallback
 * @param insertAfterUuid
 */
export declare const addCallbackMutator: (environment: Environment, newCallback: Callback, insertAfterUuid?: string) => Environment;
/**
 * Update a callback direct properties in an environment
 *
 * @param environment
 * @param callbackUuid
 * @param properties
 * @returns
 */
export declare const updateCallbackMutator: (environment: Environment, callbackUuid: string, properties: Partial<Callback>) => Environment;
/**
 * Remove a callback from an environment
 *
 * @param environment
 * @param callbackUuid
 * @returns
 */
export declare const removeCallbackMutator: (environment: Environment, callbackUuid: string) => Environment;
/**
 * Reorder all entities in an environment
 *
 * @param environment
 * @param entity - entity type to reorder
 * @param order - array of entities uuids
 * @param parentId - route uuid if entity is a route response, or 'root'/uuid of a folder if entity is a folder/route
 * @returns
 */
export declare const fullReorderEntitiesMutator: (environment: Environment, entity: ReorderableContainers, order: string[], parentId?: string) => Environment;
