import { Environment } from '../models/environment.model';
import { ReorderActionType } from '../models/reorder.model';
/**
 * Remove item from array by index
 *
 * @param items
 * @returns
 */
export declare const removeAtIndex: <T>(items: T[], index: number) => T;
/**
 * Insert item in array at index
 *
 * @param items
 * @param index
 * @param item
 * @returns
 *
 */
export declare const insertAtIndex: <T>(items: T[], index: number, item: T) => T[];
/**
 * Insert an item in an array before or after the target's index
 * Create a copy of the array.
 *
 * @param items
 * @param itemToInsert
 * @param actionType
 * @param targetUUID
 * @returns
 */
export declare const insertItemAtTarget: <T extends {
    uuid: string;
}>(items: T[], actionType: ReorderActionType, itemToInsert: T, targetUUID: string) => T[];
/**
 * Reorder a list of items (string or objects with UUID) by moving an item before or after a target
 * Create a copy of the array.
 *
 * @param items
 * @param actionType
 * @param sourceId - can be a string id or a UUID
 * @param targetId - can be a string id or a UUID
 * @returns
 */
export declare const moveItemAtTarget: <T extends {
    uuid: string;
} | string>(items: T[], actionType: ReorderActionType, sourceId: string, targetId: string) => T[];
/**
 * Sort a list of items by a list of UUIDs
 *
 * @param items
 * @param uuids
 * @returns
 */
export declare const sortByUuidsList: <T extends {
    uuid: string;
}>(items: T[], uuids: string[]) => T[];
/**
 * Return the current container of a route or folder
 * if not found, return null
 *
 * @param routeOrFolderUuid
 * @param environment
 */
export declare const findRouteOrFolderContainer: (routeOrFolderUuid: string, environment: Environment) => "root" | string | null;
