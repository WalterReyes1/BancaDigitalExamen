import { Environment } from '../models/environment.model';
import { Header, RouteResponse } from '../models/route.model';
/**
 * Extract the content-type from an array of headers
 *
 * @param headers
 */
export declare const GetContentType: (headers: Header[]) => string | null;
/**
 * Return a route response's content-type.
 * Environment's content-type is overridden by route's content-type
 *
 * @param environment
 * @param routeResponse
 */
export declare const GetRouteResponseContentType: (environment: Environment, routeResponse: RouteResponse) => string;
export declare const GetResponseCallbackContentType: (environment: Environment, routeResponse: RouteResponse) => string;
/**
 * Test if URL is valid
 *
 * @param URL
 */
export declare const IsValidURL: (address: string) => boolean;
/**
 * Clone an object using JSON.stringify
 * /!\ Suitable for Environment, Route, etc but not for complex objects containing Map, Set, etc
 */
export declare const CloneObject: <T>(objectToClone: T) => T;
/**
 * Compare two objects using JSON.Stringify
 */
export declare const IsEqual: (firstObject: any, secondObject: any) => boolean;
export declare const RemoveLeadingSlash: (str: string) => string;
export declare const GenerateUniqueID: () => string;
/**
 * Repair routes and folder references.
 * Remove references to non existing routes and folders.
 * Deduplicate references to the same route or folder.
 * Add references to orphan routes and folders at the root level.
 *
 * @param environment
 */
export declare const repairRefs: (environment: Environment) => Environment;
/**
 * browser randomUUID will be used when in a browser context (desktop app)
 * node randomUUID will be used when in a node context (CLI, serverless lib)
 *
 * @returns
 */
export declare const generateUUID: () => any;
/**
 * Return a random integer
 *
 * @param a
 * @param b
 */
export declare const RandomInt: (a?: number, b?: number) => number;
export declare const randomArrayItem: <T>(array: T[]) => T;
/**
 * Returns a deterministic stringified version of an object
 *
 * @param obj
 * @returns
 */
export declare const deterministicStringify: (obj: any) => string;
/**
 * Check that at least one item of the array is included in the provided string
 *
 * @param array
 * @param str
 * @returns
 */
export declare const stringIncludesArrayItems: (array: (string | RegExp)[], str: string) => boolean;
/**
 * Verify if the request content type is application/json
 *
 * @param headers
 */
export declare const isContentTypeApplicationJson: (headers: Header[]) => boolean;
/**
 * Get latency value (ms) depending on whether it should be randomized or not
 *
 * @param latency
 * @param enableRandomLatency
 */
export declare const getLatency: (latency: number, enableRandomLatency: boolean) => number;
