"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HighestMigrationId = exports.Migrations = void 0;
const environment_schema_constants_1 = require("../constants/environment-schema.constants");
const migrations_model_1 = require("../models/migrations.model");
const route_model_1 = require("../models/route.model");
const utils_1 = require("../utils/utils");
const fakerv8_migration_1 = require("./fakerv8-migration");
/**
 * List of migration functions.
 *
 * Will determine import compatibility:
 * lastMigration < HighestMigrationId -> migrate
 * lastMigration > HighestMigrationId -> error
 */
exports.Migrations = [
    // v0.4.0beta
    {
        id: 1,
        migrationFunction: (environment) => {
            // proxy settings
            if (!environment.proxyMode) {
                environment.proxyMode = false;
            }
            if (!environment.proxyHost) {
                environment.proxyHost = '';
            }
            if (!environment.https) {
                environment.https = false;
            }
        }
    },
    // 1.0.0
    {
        id: 2,
        migrationFunction: (environment) => {
            if (!environment.cors) {
                environment.cors = true;
            }
            environment.routes.forEach((route) => {
                // add uuid
                if (!route.uuid) {
                    route.uuid = (0, utils_1.generateUUID)();
                }
                if (route['customHeaders']) {
                    // find content type header
                    const ContentTypeHeader = route['customHeaders'].find((customHeader) => customHeader.key === 'Content-Type');
                    // add custom header only if no content type
                    if (!ContentTypeHeader) {
                        route['customHeaders'].unshift({
                            uuid: (0, utils_1.generateUUID)(),
                            key: 'Content-Type',
                            value: route['contentType']
                        });
                    }
                    // delete old content type
                    delete route['contentType'];
                }
            });
        }
    },
    // 1.2.0
    {
        id: 3,
        migrationFunction: (environment) => {
            environment.routes.forEach((route) => {
                // add missing uuid
                if (!route.uuid) {
                    route.uuid = (0, utils_1.generateUUID)();
                }
            });
        }
    },
    // 1.3.0
    {
        id: 4,
        migrationFunction: (environment) => {
            // add new headers property to environments
            if (!environment.headers) {
                environment.headers = [
                    { uuid: (0, utils_1.generateUUID)(), key: '', value: '' }
                ];
            }
            environment.routes.forEach((route) => {
                // add missing sendAsBody
                if (route.file && route.file.sendAsBody === undefined) {
                    route.file.sendAsBody = false;
                }
                // add missing documentation
                if (route.documentation === undefined) {
                    route.documentation = '';
                }
                // rename customHeaders to headers
                if (route['customHeaders']) {
                    route['headers'] = route['customHeaders'];
                    delete route['customHeaders'];
                }
            });
        }
    },
    // 1.4.0
    {
        id: 5,
        migrationFunction: (environment) => {
            delete environment['duplicates'];
            environment.routes.forEach((route) => {
                // remove file object
                route['filePath'] = route.file ? route.file.path : '';
                route['sendFileAsBody'] = route.file ? route.file.sendAsBody : false;
                delete route.file;
                delete route['duplicates'];
            });
        }
    },
    /**
     * Multiple route responses:
     * Create a responses object in each route and migrate the old route properties in the new route response
     */
    {
        id: 6,
        migrationFunction: (environment) => {
            environment.routes.forEach((route) => {
                route.responses = [];
                route.responses.push({
                    uuid: (0, utils_1.generateUUID)(),
                    statusCode: route.statusCode,
                    label: '',
                    latency: route.latency,
                    filePath: route.filePath,
                    sendFileAsBody: route.sendFileAsBody,
                    headers: route.headers,
                    body: route.body,
                    rules: []
                });
                delete route.statusCode;
                delete route.latency;
                delete route.filePath;
                delete route.sendFileAsBody;
                delete route.headers;
                delete route.body;
            });
        }
    },
    /**
     * Renew route responses UUID to ensure no uuid were duplicated after v1.5.0
     */
    {
        id: 7,
        migrationFunction: (environment) => {
            environment.routes.forEach((route) => {
                route.responses.forEach((routeResponse) => {
                    routeResponse.uuid = (0, utils_1.generateUUID)();
                });
            });
        }
    },
    /**
     * Create a "enabled" param
     */
    {
        id: 8,
        migrationFunction: (environment) => {
            environment.routes.forEach((route) => {
                route.enabled = true;
            });
        }
    },
    /**
     * Add route response label
     */
    {
        id: 9,
        migrationFunction: (environment) => {
            environment.routes.forEach((route) => {
                route.responses.forEach((routeResponse) => {
                    if (!routeResponse.label) {
                        routeResponse.label = '';
                    }
                });
            });
        }
    },
    /**
     * Add proxy request/response headers
     */
    {
        id: 10,
        migrationFunction: (environment) => {
            // add new proxy request/response headers property to environments
            if (!environment.proxyReqHeaders) {
                environment.proxyReqHeaders = [{ key: '', value: '' }];
            }
            if (!environment.proxyResHeaders) {
                environment.proxyResHeaders = [{ key: '', value: '' }];
            }
        }
    },
    /**
     * Add route response's disableTemplating option.
     * Convert statusCode to number
     */
    {
        id: 11,
        migrationFunction: (environment) => {
            environment.routes.forEach((route) => {
                route.responses.forEach((routeResponse) => {
                    if (routeResponse.disableTemplating === undefined) {
                        routeResponse.disableTemplating = false;
                    }
                    routeResponse.statusCode = parseInt(routeResponse.statusCode, 10);
                });
            });
        }
    },
    /**
     * Add route response rulesOperator
     */
    {
        id: 12,
        migrationFunction: (environment) => {
            environment.routes.forEach((route) => {
                route.responses.forEach((routeResponse) => {
                    if (routeResponse.rulesOperator === undefined) {
                        routeResponse.rulesOperator = 'OR';
                    }
                });
            });
        }
    },
    /**
     * Add route randomResponse param
     */
    {
        id: 13,
        migrationFunction: (environment) => {
            environment.routes.forEach((route) => {
                if (route.randomResponse === undefined) {
                    route.randomResponse = false;
                }
            });
        }
    },
    /**
     * Add route sequentialResponse param
     */
    {
        id: 14,
        migrationFunction: (environment) => {
            environment.routes.forEach((route) => {
                if (route.sequentialResponse === undefined) {
                    route.sequentialResponse = false;
                }
            });
        }
    },
    /**
     * Add proxyRemovePrefix param
     */
    {
        id: 15,
        migrationFunction: (environment) => {
            if (environment.proxyRemovePrefix === undefined) {
                environment.proxyRemovePrefix = false;
            }
        }
    },
    /**
     * Add hostname
     */
    {
        id: 16,
        migrationFunction: (environment) => {
            if (!environment.hostname) {
                environment.hostname = '0.0.0.0';
            }
        }
    },
    /**
     * Add route response's fallbackTo404 option.
     */
    {
        id: 17,
        migrationFunction: (environment) => {
            environment.routes.forEach((route) => {
                route.responses.forEach((routeResponse) => {
                    if (routeResponse.fallbackTo404 === undefined) {
                        routeResponse.fallbackTo404 = false;
                    }
                });
            });
        }
    },
    /**
     * Replaced isRegex in Response Rules for operator field.
     */
    {
        id: 18,
        migrationFunction: (environment) => {
            environment.routes.forEach((route) => {
                route.responses.forEach((routeResponse) => {
                    routeResponse.rules.forEach((rule) => {
                        if (rule.isRegex) {
                            rule.operator = 'regex';
                        }
                        if (rule.operator === undefined) {
                            rule.operator = environment_schema_constants_1.ResponseRuleDefault.operator;
                        }
                        delete rule.isRegex;
                    });
                });
            });
        }
    },
    /**
     * Replaced https by tlsOptions object.
     */
    {
        id: 19,
        migrationFunction: (environment) => {
            if (!environment.tlsOptions) {
                environment.tlsOptions = {
                    enabled: environment.https,
                    type: environment_schema_constants_1.EnvironmentDefault.tlsOptions.type,
                    pfxPath: environment_schema_constants_1.EnvironmentDefault.tlsOptions.pfxPath,
                    certPath: environment_schema_constants_1.EnvironmentDefault.tlsOptions.certPath,
                    keyPath: environment_schema_constants_1.EnvironmentDefault.tlsOptions.keyPath,
                    caPath: environment_schema_constants_1.EnvironmentDefault.tlsOptions.caPath,
                    passphrase: environment_schema_constants_1.EnvironmentDefault.tlsOptions.passphrase
                };
            }
            delete environment['https'];
        }
    },
    /**
     * Add route response `default` property
     */
    {
        id: 20,
        migrationFunction: (environment) => {
            environment.routes.forEach((route) => {
                route.responses.forEach((routeResponse, routeResponseIndex) => {
                    if (routeResponse.default === undefined) {
                        if (routeResponseIndex === 0) {
                            routeResponse.default = true;
                        }
                        else {
                            routeResponse.default = environment_schema_constants_1.RouteResponseDefault.default;
                        }
                    }
                });
            });
        }
    },
    /**
     * Remove route sequential and random response, and add responseMode
     */
    {
        id: 21,
        migrationFunction: (environment) => {
            environment.routes.forEach((route) => {
                if (route.responseMode === undefined) {
                    route.responseMode = route
                        .sequentialResponse
                        ? route_model_1.ResponseMode.SEQUENTIAL
                        : route.randomResponse
                            ? route_model_1.ResponseMode.RANDOM
                            : null;
                }
                delete route['sequentialResponse'];
                delete route['randomResponse'];
            });
        }
    },
    /**
     * Add invert property to the rules
     */
    {
        id: 22,
        migrationFunction: (environment) => {
            environment.routes.forEach((route) => {
                route.responses.forEach((routeResponse) => {
                    routeResponse.rules.forEach((rule) => {
                        if (rule.invert === undefined) {
                            rule.invert = environment_schema_constants_1.ResponseRuleDefault.invert;
                        }
                    });
                });
            });
        }
    },
    /**
     * Add Data bucket
     */
    {
        id: 23,
        migrationFunction: (environment) => {
            if (environment.data === undefined) {
                environment.data = environment_schema_constants_1.EnvironmentDefault.data;
            }
        }
    },
    /**
     * Add toggle menu in route responses and databucketID
     */
    {
        id: 24,
        migrationFunction: (environment) => {
            environment.routes.forEach((route) => {
                route.responses.forEach((routeResponse) => {
                    if (routeResponse.databucketID === undefined) {
                        routeResponse.databucketID = environment_schema_constants_1.RouteResponseDefault.databucketID;
                    }
                    if (routeResponse.bodyType === undefined) {
                        if (routeResponse.filePath) {
                            routeResponse.bodyType = route_model_1.BodyTypes.FILE;
                        }
                        else {
                            routeResponse.bodyType = environment_schema_constants_1.RouteResponseDefault.bodyType;
                        }
                    }
                });
            });
        }
    },
    /**
     * Add folders and rootChildren properties to envs
     */
    {
        id: 25,
        migrationFunction: (environment) => {
            if (environment.folders === undefined) {
                environment.folders = environment_schema_constants_1.EnvironmentDefault.folders;
            }
            if (environment.rootChildren === undefined) {
                environment.rootChildren = environment.routes.map((route) => ({
                    type: 'route',
                    uuid: route.uuid
                }));
            }
        }
    },
    /**
     * Add route type
     */
    {
        id: 26,
        migrationFunction: (environment) => {
            environment.routes.forEach((route) => {
                if (route.type === undefined) {
                    route.type = environment_schema_constants_1.RouteDefault.type;
                }
            });
        }
    },
    /**
     * Environment hostname default to null
     */
    {
        id: 27,
        migrationFunction: (environment) => {
            if (environment.hostname === '0.0.0.0') {
                environment.hostname = environment_schema_constants_1.EnvironmentDefault.hostname;
            }
        }
    },
    /**
     * Route crudKey default to "id"
     */
    {
        id: 28,
        migrationFunction: (environment) => {
            environment.routes.forEach((route) => {
                route.responses.forEach((routeResponse) => {
                    if (routeResponse.crudKey === undefined) {
                        routeResponse.crudKey = environment_schema_constants_1.RouteResponseDefault.crudKey;
                    }
                });
            });
        }
    },
    /**
     * Migrate faker methods to v8
     */
    {
        id: 29,
        migrationFunction: (environment) => {
            if (environment.data) {
                environment.data.forEach((data) => {
                    data.value = (0, fakerv8_migration_1.fakerV8Migration)(data.value);
                });
            }
            environment.routes.forEach((route) => {
                route.responses.forEach((routeResponse) => {
                    routeResponse.body = (0, fakerv8_migration_1.fakerV8Migration)(routeResponse.body);
                });
            });
        }
    },
    /**
     * Callbacks.
     */
    {
        id: 30,
        migrationFunction: (environment) => {
            if (!environment.callbacks) {
                environment.callbacks = environment_schema_constants_1.EnvironmentDefault.callbacks;
            }
            if (environment.routes) {
                environment.routes.forEach((route) => {
                    if (route.responses) {
                        route.responses.forEach((res) => {
                            res.callbacks = environment_schema_constants_1.RouteResponseDefault.callbacks;
                        });
                    }
                });
            }
        }
    },
    /**
     * Move route toggling to application settings
     */
    {
        id: 31,
        migrationFunction: (environment) => {
            const disabledRoutesUuids = environment.routes.reduce((disabledRoutes, route) => {
                if (!route.enabled) {
                    disabledRoutes.push(route.uuid);
                }
                delete route.enabled;
                return disabledRoutes;
            }, []);
            return (0, migrations_model_1.PostMigrationActionDisabledRoutes)(disabledRoutesUuids);
        }
    },
    /**
     * Move folder collapsing to application settings
     */
    {
        id: 32,
        migrationFunction: (environment) => {
            const collapsedFoldersUuids = environment.folders.reduce((disabledFolders, folder) => {
                if (folder.collapsed) {
                    disabledFolders.push(folder.uuid);
                }
                delete folder.collapsed;
                return disabledFolders;
            }, []);
            return (0, migrations_model_1.PostMigrationActionCollapsedFolders)(collapsedFoldersUuids);
        }
    }
];
exports.HighestMigrationId = exports.Migrations[exports.Migrations.length - 1].id;
//# sourceMappingURL=migrations.js.map