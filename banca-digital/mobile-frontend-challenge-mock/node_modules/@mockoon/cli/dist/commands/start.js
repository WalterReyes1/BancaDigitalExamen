"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commons_1 = require("@mockoon/commons");
const commons_server_1 = require("@mockoon/commons-server");
const core_1 = require("@oclif/core");
const path_1 = require("path");
const util_1 = require("util");
const config_1 = require("../config");
const command_constants_1 = require("../constants/command.constants");
const data_1 = require("../libs/data");
const utils_1 = require("../libs/utils");
class Start extends core_1.Command {
    constructor() {
        super(...arguments);
        this.createServer = (parameters) => {
            const logger = (0, commons_server_1.createLoggerInstance)(parameters.fileTransportOptions);
            const server = new commons_server_1.MockoonServer(parameters.environment, {
                environmentDirectory: parameters.environmentDirectory,
                disabledRoutes: parameters.disabledRoutes,
                fakerOptions: parameters.fakerOptions,
                envVarsPrefix: parameters.envVarsPrefix,
                enableAdminApi: parameters.enableAdminApi,
                disableTls: parameters.disableTls,
                maxTransactionLogs: parameters.maxTransactionLogs,
                enableRandomLatency: parameters.enableRandomLatency
            });
            (0, commons_server_1.listenServerEvents)(server, parameters.environment, logger, parameters.logTransaction);
            server.on('error', (errorCode, originalError) => {
                const exitErrors = [
                    commons_1.ServerErrorCodes.PORT_ALREADY_USED,
                    commons_1.ServerErrorCodes.PORT_INVALID,
                    commons_1.ServerErrorCodes.HOSTNAME_UNAVAILABLE,
                    commons_1.ServerErrorCodes.HOSTNAME_UNKNOWN,
                    commons_1.ServerErrorCodes.CERT_FILE_NOT_FOUND,
                    commons_1.ServerErrorCodes.UNKNOWN_SERVER_ERROR
                ];
                let errorMessage = originalError === null || originalError === void 0 ? void 0 : originalError.message;
                switch (errorCode) {
                    case commons_1.ServerErrorCodes.PORT_ALREADY_USED:
                    case commons_1.ServerErrorCodes.PORT_INVALID:
                        errorMessage = (0, util_1.format)(commons_server_1.ServerMessages[errorCode], parameters.environment.port);
                        break;
                    case commons_1.ServerErrorCodes.UNKNOWN_SERVER_ERROR:
                        errorMessage = (0, util_1.format)(commons_server_1.ServerMessages[errorCode], originalError === null || originalError === void 0 ? void 0 : originalError.message);
                        break;
                    case commons_1.ServerErrorCodes.CERT_FILE_NOT_FOUND:
                        errorMessage = commons_server_1.ServerMessages[errorCode];
                        break;
                    case commons_1.ServerErrorCodes.HOSTNAME_UNAVAILABLE:
                    case commons_1.ServerErrorCodes.HOSTNAME_UNKNOWN:
                        errorMessage = (0, util_1.format)(commons_server_1.ServerMessages[errorCode], parameters.environment.hostname);
                        break;
                }
                // Cannot use this.error() as Oclif does not catch it (it seems to be lost due to the async nature of Node.js http server.listen errors).
                if (exitErrors.includes(errorCode)) {
                    // red "»" character
                    this.log(`\x1b[31m»\x1b[0m   Error: ${errorMessage}`);
                    process.exit(2);
                }
            });
            process.on('SIGINT', () => {
                server.stop();
            });
            server.start();
        };
    }
    async run() {
        const { flags: userFlags } = await this.parse(Start);
        // validate flags
        if (!commons_1.FakerAvailableLocalesList.includes(userFlags['faker-locale'])) {
            this.error('Invalid Faker.js locale. See documentation for supported locales (https://github.com/mockoon/mockoon/blob/main/packages/cli/README.md#fakerjs-options).');
        }
        try {
            const parsedEnvironments = await (0, data_1.parseDataFiles)(userFlags.data, {
                ports: userFlags.port,
                hostnames: userFlags.hostname
            }, userFlags.repair);
            for (const environmentInfo of parsedEnvironments) {
                this.createServer({
                    environment: environmentInfo.environment,
                    environmentDirectory: (0, utils_1.getDirname)(environmentInfo.originalPath) || '',
                    logTransaction: userFlags['log-transaction'],
                    fileTransportOptions: userFlags['disable-log-to-file']
                        ? null
                        : {
                            filename: (0, path_1.join)(config_1.Config.logsPath, `${(0, utils_1.transformEnvironmentName)(environmentInfo.environment.name)}.log`)
                        },
                    disabledRoutes: userFlags['disable-routes'],
                    fakerOptions: {
                        locale: userFlags['faker-locale'],
                        seed: userFlags['faker-seed']
                    },
                    envVarsPrefix: userFlags['env-vars-prefix'],
                    enableAdminApi: !userFlags['disable-admin-api'],
                    disableTls: userFlags['disable-tls'],
                    maxTransactionLogs: userFlags['max-transaction-logs'],
                    enableRandomLatency: userFlags['enable-random-latency']
                });
            }
        }
        catch (error) {
            this.error(error.message);
        }
    }
}
Start.description = 'Start one or more mock API';
Start.examples = [
    '$ mockoon-cli start --data ~/data.json',
    '$ mockoon-cli start --data ~/data1.json ~/data2.json --port 3000 3001 --hostname 127.0.0.1 192.168.1.1',
    '$ mockoon-cli start --data https://file-server/data.json',
    '$ mockoon-cli start --data ~/data.json --log-transaction',
    '$ mockoon-cli start --data ~/data.json --disable-routes route1 route2',
    '$ mockoon-cli start --data ~/data.json --enable-random-latency'
];
Start.flags = {
    ...command_constants_1.commonFlags,
    hostname: core_1.Flags.string({
        char: 'l',
        description: 'Listening hostname(s)',
        multiple: true,
        default: []
    }),
    port: core_1.Flags.integer({
        char: 'p',
        description: 'Override environment(s) port(s)',
        multiple: true,
        default: []
    }),
    repair: core_1.Flags.boolean({
        char: 'r',
        description: 'If the data file seems too old, or an invalid Mockoon file, migrate/repair without prompting',
        default: false
    }),
    'disable-log-to-file': core_1.Flags.boolean({
        char: 'X',
        description: 'Only log to stdout and stderr',
        default: false
    }),
    'disable-routes': core_1.Flags.string({
        char: 'e',
        description: "Disable route(s) by UUID or keyword present in the route's path or keyword present in a folder name (do not include a leading slash)",
        multiple: true,
        default: []
    }),
    'faker-locale': core_1.Flags.string({
        char: 'c',
        description: "Faker locale (e.g. 'en', 'en_GB', etc. For supported locales, see documentation: https://github.com/mockoon/mockoon/blob/main/packages/cli/README.md#fakerjs-options)",
        default: 'en'
    }),
    'faker-seed': core_1.Flags.integer({
        char: 's',
        description: 'Number for the Faker.js seed (e.g. 1234)',
        default: undefined
    }),
    'env-vars-prefix': core_1.Flags.string({
        char: 'x',
        description: `Prefix of environment variables available at runtime (default: "${commons_1.defaultEnvironmentVariablesPrefix}")`,
        multiple: false,
        default: commons_1.defaultEnvironmentVariablesPrefix
    }),
    'disable-admin-api': core_1.Flags.boolean({
        description: 'Disable the admin API, enabled by default (more info: https://mockoon.com/docs/latest/admin-api/overview/)',
        default: false
    }),
    'disable-tls': core_1.Flags.boolean({
        description: 'Disable TLS for all environments. TLS configuration is part of the environment configuration (more info: https://mockoon.com/docs/latest/server-configuration/serving-over-tls/).',
        default: false
    }),
    'max-transaction-logs': core_1.Flags.integer({
        description: `Maximum number of transaction logs to keep in memory for retrieval via the admin API (default: ${commons_1.defaultMaxTransactionLogs}).`,
        default: commons_1.defaultMaxTransactionLogs
    }),
    'enable-random-latency': core_1.Flags.boolean({
        description: 'Enable random latency from 0 to value specified in the route settings',
        default: false
    })
};
exports.default = Start;
//# sourceMappingURL=start.js.map